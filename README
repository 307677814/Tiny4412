 
=================Bin================

E4412_N.bl1.bin
    制作SD卡时的BL1数据
bl2.bin
    制作SD卡时的BL2数据

E4412_tzsw.bin
    制作SD卡时的TrustZone数据

mkbl2
    把uboot.bin 变成bl2.bin 的程序

u-boot.bin
    事先编译好的uboot

sd_fusing.sh
    制作SD卡的脚本

zImage
    事先编译好的zImage



=================Busybox================
busybox-1.22.1
    这一版的有问题，复制完_install/* 后， 需要把linuxrc删除后，在重新复制进来
    原因分析:linuxrc只是一个链接文件，删除再复制进来就是不是链接文件了,
    可是1.17.2版本linuxrc也是一个链接，为什么就可以成功运行，目前原因不清楚

busybox-1.17.2
    这一版本是ok的

 busybox-1.30.0.tar.bz2
    busybox 1.30 版本

 busybox_1.30_patch
    1.30 版本对应的patch 


=================Kernel================

linux-3.5-20151029.tgz
    友善之臂提供的kernel

    编译步骤
     1 cp tiny4412_linux_defconfig   .config
     2 vim  .config, 确保  485 # CONFIG_ARM_TRUSTZONE is not set  已经注释掉
     3 make

linux-4.4.tar.xz
    支持Tiny4412 设备树的kernel, 官方原始版本 (高版本的都支持了)
    编译方法
        1) 打patch 
            cd linux-4.4
            patch -p1 < ../linux-4.4_device_tree.patch

        2) 编译uImage
            (使用patch 就不要不执行, 否则会覆盖.config)make exynos_defconfig
            make uImage LOADADDR=0x40008000 -j4
            arch/arm/boot 下生成uImage

        3) 编译dts
            make dtbs
            arch/arm/boot/dts/ 下生成exynos4412-tiny4412.dtb

linux-4.4_device_tree.patch
    linux-4.4 带有设备树配置的patch 

linux-4.4
    支持设备树的内核
        1   配置 
            cp linux_4.4_device_tree_defconfig .config

        2) 编译uImage
            make uImage LOADADDR=0x40008000 -j4
            arch/arm/boot 下生成uImage

        3) 编译dts
            make dtbs
            arch/arm/boot/dts/ 下生成exynos4412-tiny4412.dtb

=================Pdf================
Android_Exynos4412_iROM_Secure_Booting_Guide_Ver.1.00.01.pdf
    Booting 分区的说明

DDI0406C_d_armv7ar_arm.pdf
    armv7 架构手册

Exynos 4412 SCP_Users Manual_Ver.0.10.00_Preliminary0.pdf
    4412用户手册

Tiny4412-1412-Schematic.pdf
    4412 核心板原理图

Tiny4412SDK-1506-Schematic.pdf
    4412 底板原理图

24AA02E48
	IIC 芯片
	
MMA7660FC
	3轴加速度芯片
	
OLED096_SSD1306.pdf
    oled 0.96寸模块

e.MMC_4.41-KLMxGxxE4x-x001.pdf
    eMMC模块    
    
eMMC_Spec.pdf
    eMMC标准协议(5.1)

=================Shell================

create_file_system.sh  
    基本busybox-1.30 制作的文件系统

collect_readme.sh
    将每层目录下的README.txt 收集起来

create_file_system_4.4.sh
    制作linux-4.4 的文件系统

mk_ramdisk.sh
    制作ramdisk 文件系统
    
 

=================SourceCode================
reg_editor
    查看寄存器的小工具
    
    使用方法：
        1) 加载驱动 reg_editor_drv.ko
        2) 执行测试程序  ./reg_editor/drv_test/drv_test
            Use:./drv_test <r8|r16|r32> <reg_address> [num] 
            Use:./drv_test <w8|w16|w32> <reg_address> <val>

platform_resource
    平台的资源

001_led
    001_simple_led  
        最简单的led 驱动，insmod 点亮led1, rmmod 熄灭led1

    002_plat_led
        使用平台总写的led 驱动

        测试方法:
            1) 加载资源 insmod platform_resource/platform_res.ko
            2) 加载驱动 indmod led_platform_drv.ko
            3) 执行测试程序 ./002_plat_led/drv_test/drv_test ,可以看到led1~led4依次闪烁一遍

    003_led_class  
        使用led子系统来实现 led 的控制
        
        测试方法:
            1) 加载驱动 insmod insmod led_class_drv.ko
            2) cd sys/class/leds/s3c4412_led/ 
            3) echo 1 > brightness ; 点亮led 
            4) echo 0 > brightness ; 熄灭led 

    004_plat_led_class
        使用led子系统和platform-device-driver 的方法实现对led的控制

        测试方法
            1) 加载资源 insmod platform_resource/platform_res.ko
            2) 加载驱动 insmod led_plat_class_drv.ko
            3) cd sys/class/leds/ledX ; X 表示具体的数字, 可以为0~3
            4) echo 1 > brightness ; 点亮led 
            5) echo 0 > brightness ; 熄灭led 

002_i2c
    001_24AA025E48
        eeprom-s4aa025e48 芯片的驱动程序
    
    测试方法
        1) 加载资源 insmod platform_resource/platform_res.ko
        2) 加载驱动 insmod i2c_eeprom_drv.ko
        3) 执行测试程序 ./drv_test 

        命令如下
            Use ./drv_test <w> <addr> <value> 
            Use ./drv_test <r> <addr> [count] 
        举例
            [root@4412 ~]#./drv_test w 5 10
            [INF]:addr:0x5 , value:0x10 

            [root@4412 ~]#./drv_test r 5
            [0x5 ] 0x10

            [root@4412 ~]#./drv_test r 0 10
            [0x0 ] 0x0   0x1   0x2   0x3   0x4   0x10  0x0   0x0
            [0x8 ] 0x0   0x0

    002_mma7660
        mma7660 三轴加速度计 使用了DEVICE_ATTR 来调试

    测试方法
        1) 加载资源 insmod platform_resource/platform_res.ko
        2) 加载驱动 insmod mma7660_drv.ko
        3) 执行测试程序 ./drv_test 
        会输出X Y Z 三个轴上的数据[-31, 31]
            [root@4412 ~]#./drv_test
            x:  2,y:-30,z: 22
            x:  2,y:-30,z: 21
            x:  1,y:-30,z: 22
            x:  1,y:-30,z: 22
            x:  0,y:-31,z: 21
            x:  2,y:-31,z: 22
        
        4) cd /sys/bus/i2c/drivers/mma7660/3-004c, 此目录下会有reg 和 xyz_axis 2个文件
            xyz_axis: cat 这文件就可以读取XYZ三轴上的数据

                [root@4412 /sys/devices/platform/s3c2440-i2c.3/i2c-3/3-004c]#cat xyz_axis 
                1, -30,  22

            reg: cat 这个文件就可以读取mma7660所有寄存器的数据

                [root@4412 /sys/devices/platform/s3c2440-i2c.3/i2c-3/3-004c]#cat reg
                REG: [0x00] = 0x02 ...... [ 0000 0010 ]
                REG: [0x01] = 0x3f ...... [ 0011 1111 ]
                REG: [0x02] = 0x16 ...... [ 0001 0110 ]
                REG: [0x03] = 0x01 ...... [ 0000 0001 ]
                REG: [0x04] = 0x01 ...... [ 0000 0001 ]
                REG: [0x05] = 0xa0 ...... [ 1010 0000 ]
                REG: [0x06] = 0xe7 ...... [ 1110 0111 ]
                REG: [0x07] = 0x01 ...... [ 0000 0001 ]
                REG: [0x08] = 0x49 ...... [ 0100 1001 ]
                REG: [0x09] = 0x04 ...... [ 0000 0100 ]
                REG: [0x0a] = 0x0f ...... [ 0000 1111 ] 

            reg: echo <reg> <value> > reg 就可以修改寄存器的数据
            某些寄存器的数值可能无法改动，因此会提示Error并此寄存器的数据

                [root@4412 /sys/devices/platform/s3c2440-i2c.3/i2c-3/3-004c]#echo 7 0 > reg 
                write [0x7] = 0x0 OK

                [root@4412 /sys/devices/platform/s3c2440-i2c.3/i2c-3/3-004c]#echo 0 10 > reg
                write [0x0] = 0x10 Error
                ret   [0x0] = 0x0

003_spi
    使用spi 来驱动oled_0.96 模块
    
    测试方法
    
        1)加载ko insmod oled.ko
        2)执行测试程序 ./drv_test
            此时oled 会显示"嵌入式"


=================TAR================

filesystem.tar.gz
    制作好的文件系统

libiconv-1.16.tar.gz
    iconv 库， 可以将utf-8 转为 gbk

    编译方法
        1) 创建安装目录 mkdir libiconv_build
        2) 执行配置 ./configure --prefix=/home/black/Tiny4412/TAR/libiconv_build CC=arm-linux-gcc --host=arm 
        3) 编译 make && make install
=================Tool================
arm-linux-gcc-4.5.1-v6-vfp-20120301.tgz
	交叉编译器

dnw-linux.tar.gz  
    通用dnw 工具

dnw-linux_ubuntu_16_04.tar.gz
    ubuntu 16.04 使用的dnw 工具
    使用步骤
        1, 解压 tar -xvf dnw-linux_ubuntu_16_04.tar.gz

        2,
            1)cd dnw-linux_ubuntu_16_04/src/driver 然后执行make
            2)插入模块 insmod secbulk.ko
            3)查看是否插入成功  lsmod | grep secbulk

        3,
            1)cd dnw-linux_ubuntu_16_04/src/dnw 然后执行make
            2)sudo cp dnw /bin

arm-2014.05-29-arm-none-linux-gnueabi-i686-pc-linux-gnu.tar.bz2
    交叉编译 4.8.3 用于支持kernel 4.x 版本以上
=================Uboot================
uboot_tiny4412-master.zip
    友善之臂提供的uboot-2010.12,包含了制作sd卡的工具

    uboot写入SD卡的步骤
        1 cd uboot_tiny4412-master
        2 make tiny4412_config
        3 make
        4 cd uboot_tiny4412-master/sd_fuse
        5 make
        6 cd uboot_tiny4412-master/sd_fuse/tiny4412
        7 sudo dd if=/dev/zero of=/dev/mmcblk0 bs=1024 count=10240
        8 sudo ./sd_fusing.sh  /dev/mmcblk0 

uboot_kernel_4.4_device_tree.patch
    支持kernel-4.4 设备树功能的patch

uboot_for_kernel_4_4
    支持4.4内核设备树配置的uboot 
        1 ce uboot_for_kernel_4_4
        2 make tiny4412_config
        3 make
        4 cd uboot_tiny4412-master/sd_fuse
        5 make
        6 cd uboot_tiny4412-master/sd_fuse/tiny4412
        7 sudo dd if=/dev/zero of=/dev/mmcblk0 bs=1024 count=10240
        8 sudo ./sd_fusing.sh  /dev/mmcblk0 
